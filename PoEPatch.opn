protocol PoEPatch with
BinaryEncodingDefaults{Endian = Endian.Big},
Visualization{AliasName = "PoE"},
Documentation
{
    ProtocolName = "Path of Exile Patch Protocol",
    ShortName = "PoEPatch",
    Description = ""
};

using Standard;
using PoE;
using TCP;
using Utility;

endpoint Server
	accepts RequestServerInfo
	accepts RequestFolderList
	accepts RequestPatchNotes
	accepts UnknownPacket
	issues ServerInfo
	issues FolderList
	issues PatchNotes
	issues UnknownPacket;

client endpoint Client connected to Server;

type Handler
{
	static any message Decode(stream s, BoolWrapper unsized)
	{
		switch (s.CurrentByte)
		{
			case 1 =>
				var m = BinaryDecoder<RequestServerInfo>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 2 =>
				var m = BinaryDecoder<ServerInfo>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 3 =>
				var m = BinaryDecoder<RequestFolderList>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 4 =>
				var m = BinaryDecoder<FolderList>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 5 =>
				var m = BinaryDecoder<RequestPatchNotes>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 6 =>
				var m = BinaryDecoder<PatchNotes>(s);
				if(m == nothing)
					return null;
				return m as any message;
			default =>
				unsized.Value = true;
				var m = BinaryDecoder<UnknownPacket>(s);
				if(m == nothing)
					return null;
				return m as any message;
		}
	}
	
	static void Dispatch(bool Input, any message msg)
	{
		if (Input)
			dispatch endpoint Server accepts msg;
		else
			dispatch endpoint Server issues msg;
	}
}

ProtocolHandler handler = new ProtocolHandler{Decode = Handler.Decode, Dispatch = Handler.Dispatch};

endpoint ReassemblyNode[any endpoint ep]
    accepts TCP.VirtualDataSegment issues TCP.VirtualDataSegment
{
	DecodingBuffer in_buffer = new DecodingBuffer{Input = true, Handler = handler};
	DecodingBuffer out_buffer = new DecodingBuffer{Input = false, Handler = handler};

    process this accepts s:TCP.VirtualDataSegment
    {
		in_buffer.Add(new PoE.DecryptedPayload{Payload = s.Payload});
		dispatch endpoint GarbageEndpoint accepts s;
    }

    process this issues s:TCP.VirtualDataSegment
    {
        out_buffer.Add(new PoE.DecryptedPayload{Payload = s.Payload});
        dispatch endpoint GarbageEndpoint issues s;
    }
}

autostart actor ReassemblyActor(ReassemblyNode server)
{    
    ~endpoint(ReassemblyNode server)
    {
		server.in_buffer.Clear();
		server.out_buffer.Clear();
    }
}

autostart actor ServerOverTCP(TCP.Server server)
{
	array<ushort> ServerPorts = [12992, 12993, 12994, 12995];

    process server issues s:TCP.VirtualDataSegment where (s.SourcePort in ServerPorts)
    {
       var e = endpoint ReassemblyNode[server];
       dispatch e issues s;
    }
	
    process server accepts s:TCP.VirtualDataSegment where (s.DestinationPort in ServerPorts)
    {
        var e = endpoint ReassemblyNode[server];
        dispatch e accepts s;
    }
}

message RequestServerInfo
{
	byte Id;
	byte ProtocolVersion;
}

message ServerInfo
{
    byte Id;
	PoE.Hash u0;
	String Server;
	String BackupServer;
}

message RequestFolderList
{
    byte Id;
	String FolderName;
}

type FolderListEntry
{
	bool Directory;
	String EntryName;
	uint u1;
	PoE.Hash Hash; // SHA256 hash of the file content or of all the immediate children if it's a directory.
	
	override string ToString()
	{
		return EntryName.ToString();
	}
}

message FolderList
{
    byte Id;
	String FolderName;
	uint FileCount;
	array<FolderListEntry> Entries with BinaryEncoding{Length = FileCount};
}

message RequestPatchNotes
{
    byte Id;
}

message PatchNotes
{
    byte Id;
	String NotesURL;
}

message UnknownPacket
{
    byte Id;
}

