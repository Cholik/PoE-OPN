protocol PoELogin with
BinaryEncodingDefaults{Endian = Endian.Big},
Visualization{AliasName = "PoE"},
Documentation
{
    ProtocolName = "Path of Exile Login Protocol",
    ShortName = "PoELogin",
    Description = ""
};

using Standard;
using PoE;
using VirtualTransport;
using Utility;
using Salsa20;
using PoEKey;

endpoint Server
	accepts KeyExchange
	accepts LoginRequest
	accepts ChangePasswordRequest
	accepts DeleteCharacterRequest
	accepts PlayRequest
	accepts CreateCharRequest
	accepts RequestLeagueInfo
	accepts UnknownPacket
	issues KeyExchange
	issues LoginRequestResult
	issues ChangePasswordResult
	issues LeagueUpdate
	issues GameServerData
	issues Unknown0
	issues LeagueInfo
	issues UnknownPacket;

client endpoint Client connected to Server;

type Handler
{
}

endpoint DecodeNode[any endpoint server]
    accepts VirtualDataSegment issues VirtualDataSegment
{
	EncryptionContext Encryption = new EncryptionContext{};
	bool ReceivedKey = false;
	bool SentKey = false;
	binary Key = null;
	
	any message Decode(stream s, BoolWrapper unsized)
	{
		switch (s.CurrentByte)
		{
			case 2 =>
				var m = BinaryDecoder<LoginRequest>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 3 =>
				var m = BinaryDecoder<LoginRequestResult>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 4 =>
				var m = BinaryDecoder<ChangePasswordRequest>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 5 =>
				var m = BinaryDecoder<ChangePasswordResult>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 6 =>
				var m = BinaryDecoder<DeleteCharacterRequest>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 7 =>
				var m = BinaryDecoder<LeagueUpdate>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 8 =>
				var m = BinaryDecoder<PlayRequest>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 10 =>
				var m = BinaryDecoder<CreateCharRequest>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 11 =>
				var m = BinaryDecoder<LeagueUpdate>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 12 =>
				var m = BinaryDecoder<GameServerData>(s);
				if(m == nothing)
					return null;
				var mf = m as GameServerData;
				PoE.EncryptionKeys[mf.ConnectionId] = mf.GameServer.EncryptionKey;
				mf.GameServer.Declare();
				return m as any message;
			case 14 =>
				var m = BinaryDecoder<Unknown0>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 15 =>
				var m = BinaryDecoder<RequestLeagueInfo>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 16 =>
				var m = BinaryDecoder<LeagueInfo>(s);
				if(m == nothing)
					return null;
				return m as any message;
			default =>
				unsized.Value = true;
				var m = BinaryDecoder<UnknownPacket>(s);
				if(m == nothing)
					return null;
				return m as any message;
		}
	}
	
	void Dispatch(bool Input, any message msg)
	{
		if (Input)
			dispatch endpoint Server accepts msg;
		else
			dispatch endpoint Server issues msg;
	}
	
	void GetKey()
	{
		if(Key == null)
		{
			var ep = (endpoint PoE.ReassemblyNode[server]) as PoE.ReassemblyNode;
			ep.SetHandler(new ProtocolHandler{Decode = Decode, Dispatch = Dispatch});
			Key = PoEKey.GetKey();
			Encryption.Setup(Key);
		}
	}

    process this accepts s:VirtualDataSegment
    {
		if(!ReceivedKey)
		{
			ReceivedKey = true;
			dispatch endpoint Server accepts (BinaryDecoder<KeyExchange>(s.Payload) as any message);
		}
		else
		{
			GetKey();
			var data = Encryption.In.Process(s.Payload);
			var e = endpoint PoE.ReassemblyNode[server];
			dispatch e accepts (new PoE.DecryptedPayload{Payload = data} as any message);
		}
    }

    process this issues s:VirtualDataSegment
    {
		if(!SentKey)
		{
			SentKey = true;
			dispatch endpoint Server issues (BinaryDecoder<KeyExchange>(s.Payload) as any message);
		}
		else
		{
			GetKey();
			var data = Encryption.Out.Process(s.Payload);
			var e = endpoint PoE.ReassemblyNode[server];
			dispatch e issues (new PoE.DecryptedPayload{Payload = data} as any message);
		}
    }
}

autostart actor ServerOverTCP(VirtualTransport.Server server)
{
	array<ushort> ServerPorts = [20480, 20481];
	
    process server issues s:VirtualDataSegment where (s.SourcePort in ServerPorts)
    {
		var e = endpoint DecodeNode[server];
		dispatch e issues s;
    }
	
    process server accepts s:VirtualDataSegment where (s.DestinationPort in ServerPorts)
    {
		var e = endpoint DecodeNode[server];
		dispatch e accepts s;
    }
}

type PasswordHash
{
	binary Hash with BinaryEncoding{Length = 32}; // Salted SHA-256
}

pattern StatusType = enum byte
{
	ActionSuccessful = 0x00,
	AccountDoesntExist = 0x05,
	WrongPassword = 0x06,
	NameTaken = 0x15,
	NameInvalid = 0x16
};

message KeyExchange
{
    byte Id;
	binary PublicKey with BinaryEncoding{Length = 128};
}

message LoginRequest
{
    byte Id;
	PoE.Unknown[4] u0;
	PoE.String Account;
	PasswordHash Password;
}

type Character
{
	PoE.String Name;
	PoE.String League;
	PoE.Unknown[7] u0;
	byte Level;
	PoE.Unknown[4] u1;
	PoE.Class Class;
}

type CharacterList
{
	byte CharacterCount;
	array<Character> Characters with BinaryEncoding{Length = CharacterCount};
}

type LoginCharacterList
{
	PoE.Unknown[4] u0;
	CharacterList Characters;
	PoE.Unknown[4] u1;
}

message LoginRequestResult
{
    byte Id;
	StatusType Status;
	PoE.Unknown[36] u0;
	optional [|Status == StatusType.ActionSuccessful|] LoginCharacterList Characters;
}

message ChangePasswordRequest
{
    byte Id;
	PasswordHash OldPassword;
	PasswordHash NewPassword;
}

message ChangePasswordResult
{
    byte Id;
	StatusType Status;
	PoE.Unknown[4] u0;
}

message DeleteCharacterRequest
{
    byte Id;
	PoE.String Character; 
}

message LeagueUpdate
{
    byte Id;
	StatusType Status;
	PoE.Unknown[4] u0;
	optional [|Status == StatusType.ActionSuccessful|] CharacterList Characters;
}

message PlayRequest
{
    byte Id;
	PoE.String Character; 
}

message CreateCharRequest
{
    byte Id;
	PoE.String Name;
	PoE.String League;
	PoE.Unknown[11] u0;
	PoE.Class Class;
	PoE.Unknown[32] u1;
}

message GameServerData
{
    byte Id;
	uint ConnectionId;
	PoE.Unknown[7] u0;
	PoE.GameServerInfo GameServer;
}

message Unknown0
{
    byte Id;
	byte u0;
}

message RequestLeagueInfo
{
    byte Id;
}

type League
{
	PoE.String Name;
	PoE.String Description;
	byte u0 with BinaryEncoding{Width = 6};
	byte PasswordProtected with BinaryEncoding{Width = 1};
	byte Hardcore with BinaryEncoding{Width = 1};
	PoE.Unknown[3] u1;
}

message LeagueInfo
{
    byte Id;
	uint LeagueCount;
	array<League> Leagues with BinaryEncoding{Length = LeagueCount};
}

message UnknownPacket
{
    byte Id;
}

