protocol PoEGame with
BinaryEncodingDefaults{Endian = Endian.Big},
Visualization{AliasName = "PoE"},
Documentation
{
    ProtocolName = "Path of Exile Game Protocol",
    ShortName = "PoEGame",
    Description = ""
};

using Standard;
using PoE;
using TCP;
using Utility;

endpoint Server
	accepts EnterRequest
	accepts LinkItem
	accepts SendChat
	accepts Exit
	accepts Ping
	accepts Unknown2
	accepts UseOnLocation
	accepts PickItem
	accepts PlaceItem
	accepts SpendPassivePoint
	accepts EquipSkill
	accepts UseObject
	accepts Unknown1
	accepts JoinParty
	accepts LeaveParty
	accepts UpdatePublicParty
	accepts RequestPartyDetails
	accepts RequestPartyList
	accepts UseWeaponSet
	accepts UnknownPacket
	issues ReceiveChat
	issues Ping
	issues EnterResult
	issues Unknown0
	issues NewGameServer
	issues PassivePoints
	issues AssignedSkills
	issues PlayerUpdate
	issues PlayerLeftParty
	issues PartyDetails
	issues LeftParty
	issues PartyList
	issues Friend
	issues UseWeaponSetAck
	issues ObjectAdd
	issues ObjectUpdate
	issues ObjectRemove
	issues UnknownPacket;

client endpoint Client connected to Server;

endpoint DecodeNode[any endpoint server]
    accepts TCP.VirtualDataSegment issues TCP.VirtualDataSegment
{
	EncryptionContext Encryption = new EncryptionContext{};
	bool SentInfo = false;
	
	static any message Decode(stream s, BoolWrapper unsized)
	{
		switch (s.CurrentByte)
		{
			case 1 =>
				var m = BinaryDecoder<EnterRequest>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 3 =>
				var m = BinaryDecoder<LinkItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 4 =>
				var m = BinaryDecoder<SendChat>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 5 =>
				unsized.Value = true;
				var m = BinaryDecoder<ReceiveChat>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 6 =>
				var m = BinaryDecoder<Exit>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 8 =>
				var m = BinaryDecoder<Ping>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 9 =>
				var m = BinaryDecoder<Ping>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xB => // bumped
				unsized.Value = true;
				var m = BinaryDecoder<EnterResult>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xC => // bumped
				var m = BinaryDecoder<Unknown0>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xD =>
				var m = BinaryDecoder<Unknown2>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xE =>
				var m = BinaryDecoder<UseOnLocation>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x10 =>
				var m = BinaryDecoder<NewGameServer>(s);
				if(m == nothing)
					return null;
				PoE.EncryptionKeys[m.ConnectionId] = m.GameServer.EncryptionKey;
				m.GameServer.Declare();
				return m as any message;
			case 0x11 =>
				var m = BinaryDecoder<PickItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x13 =>
				var m = BinaryDecoder<PlaceItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x17 =>
				var m = BinaryDecoder<PassivePoints>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x18 =>
				var m = BinaryDecoder<SpendPassivePoint>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x20 =>
				var m = BinaryDecoder<EquipSkill>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x21 =>
				var m = BinaryDecoder<AssignedSkills>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x24 =>
				var m = BinaryDecoder<UseObject>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x28 =>
				var m = BinaryDecoder<Unknown1>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x37 =>
				var m = BinaryDecoder<JoinParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x38 =>
				var m = BinaryDecoder<LeaveParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3A =>
				var m = BinaryDecoder<UpdatePublicParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3B =>
				var m = BinaryDecoder<RequestPartyDetails>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3C =>
				var m = BinaryDecoder<PlayerUpdate>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3D =>
				var m = BinaryDecoder<PlayerLeftParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3E =>
				var m = BinaryDecoder<PartyDetails>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3F =>
				var m = BinaryDecoder<LeftParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x41 =>
				var m = BinaryDecoder<RequestPartyList>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x42 =>
				var m = BinaryDecoder<PartyList>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x57 =>
				var m = BinaryDecoder<Friend>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x5D =>
				var m = BinaryDecoder<UseWeaponSet>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x5E =>
				var m = BinaryDecoder<UseWeaponSetAck>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xF0 =>
				unsized.Value = true;
				var m = BinaryDecoder<ObjectAdd>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xF1 =>
				unsized.Value = true;
				var m = BinaryDecoder<ObjectUpdate>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xF2 =>
				var m = BinaryDecoder<ObjectRemove>(s);
				if(m == nothing)
					return null;
				return m as any message;
			default =>
				unsized.Value = true;
				var m = BinaryDecoder<UnknownPacket>(s);
				if(m == nothing)
					return null;
				return m as any message;
		}
	}
	
	static void Dispatch(bool Input, any message msg)
	{
		if (Input)
			dispatch endpoint Server accepts msg;
		else
			dispatch endpoint Server issues msg;
	}
	
    process this accepts s:TCP.VirtualDataSegment
    {
		if(!SentInfo)
		{
			SentInfo = true;
			var Request = BinaryDecoder<EnterRequest>(s.Payload);
			var Key = PoE.EncryptionKeys[Request.ConnectionId];
			Encryption.Setup(Key);
		
			var ep = (endpoint PoE.ReassemblyNode[server]) as PoE.ReassemblyNode;
			ep.SetHandler(new ProtocolHandler{Decode = Decode, Dispatch = Dispatch});
			
			dispatch endpoint Server accepts Request as any message;
		}
		else
		{
			var data = Encryption.In.Process(s.Payload);
			var e = endpoint PoE.ReassemblyNode[server];
			dispatch e accepts (new PoE.DecryptedPayload{Payload = data} as any message);
		}
    }

    process this issues s:TCP.VirtualDataSegment
    {
		var data = Encryption.Out.Process(s.Payload);
		var e = endpoint PoE.ReassemblyNode[server];
		dispatch e issues (new PoE.DecryptedPayload{Payload = data} as any message);
    }
}

autostart actor ServerOverTCP(TCP.Server server)
{
	process server issues s:TCP.VirtualDataSegment where ((s#SourceAddrBin as binary) in PoE.GameServers) || ((s#DestinationAddrBin as binary) in PoE.GameServers)
	{
		var e = endpoint DecodeNode[server];
		dispatch e issues s;
	}

	process server accepts s:TCP.VirtualDataSegment where ((s#SourceAddrBin as binary) in PoE.GameServers) || ((s#DestinationAddrBin as binary) in PoE.GameServers)
	{
		var e = endpoint DecodeNode[server];
		dispatch e accepts s;
	}
}

message EnterRequest
{
    byte Id;
	PoE.String Character;
	uint ConnectionId;
}

message LinkItem
{
    byte Id;
	uint ItemLinkId;
	uint u0;
	uint ItemId;
	byte u1;
}

message SendChat
{
    byte Id;
    PoE.String Message;
	byte ItemCount;
	array<uint> ItemLinkIds with BinaryEncoding{Length = ItemCount};
}

type LinkedItem
{
	uint MessageIndex;
	PoE.Unknown[13] u0;
	uint StackSize;
}

message ReceiveChat
{
    byte Id;
    PoE.String Character;
    PoE.String Message;
	ushort ItemCount;
	//array<LinkedItem> Items with BinaryEncoding{Length = ItemCount};
}

message Exit
{
    byte Id;
}

message Ping
{
    byte Id;
}

message Unknown0
{
    byte Id;
	ushort Count;
	array<ushort> u0 with BinaryEncoding{Length = Count};
	array<byte> u1 with BinaryEncoding{Length = Count};
}

message Unknown1
{
    byte Id;
	uint u0;
	uint u1;
}

message EnterResult
{
    byte Id;
	uint u0;
	PoE.String League;
	uint MapSeed;
}

message Unknown2
{
    byte Id;
	PoE.Unknown[9] u0;
}

message UseOnLocation
{
    byte Id;
	uint X;
	uint Y;
	PoE.Skill Skill;
	ushort ActionId;
	byte u0;
}

message NewGameServer
{
    byte Id;
	uint ConnectionId;
	PoE.Unknown[11] u0;
	PoE.GameServerInfo GameServer;
}

pattern ItemContainer = enum uint
{
	Inventory = 1,
	Body = 2,
	LeftHand = 3,
	RightHand = 4,
	Helm = 5,
	Amulet = 6,
	LeftRing = 7,
	RightRing = 8,
	Gloves = 9,
	Boots = 10,
	Belt = 11,
	Flasks = 12
};

message PickItem
{
    byte Id;
	uint ItemId;
	ItemContainer Container;
}

message PlaceItem
{
    byte Id;
	ItemContainer Container;
	uint X;
	uint Y;
}

message PassivePoints
{
    byte Id;
	ushort NodeCount;
	array<PoE.ushortLE> Nodes with BinaryEncoding{Length = NodeCount};
	PoE.Unknown[6] u0;
}

message SpendPassivePoint
{
    byte Id;
	ushort u0;
	ushort Node;
}

message EquipSkill
{
    byte Id;
	PoE.SkillSlot Slot;
	PoE.Skill Skill;
}

message AssignedSkills
{
    byte Id;
	array<PoE.SkillLE> Skills with BinaryEncoding{Length = 7};
}

message UseObject
{
    byte Id;
	uint u0;
	uint u1;
}

message JoinParty
{
    byte Id;
	uint PartyId;
}

message LeaveParty
{
    byte Id;
	uint PartyId;
}

message UpdatePublicParty
{
    byte Id;
	PoE.String PartyName;
}

message RequestPartyDetails
{
    byte Id;
	uint PartyId;
}

type CharacterInfo
{
	PoE.String Character;
	uint Level;
	PoE.Class Class;
	PoE.Unknown[3] u0;
	PoE.Area Area;
}

message PlayerUpdate
{
    byte Id;
	PoE.String Account;
	PoE.String Message;
    bool Online;
	optional [|Online == true|] CharacterInfo Character;
}

message PlayerLeftParty
{
    byte Id;
	PoE.String Character;
}

type Party
{
	uint Id;
	PoE.String Name;
}

type PartyPlayer
{
	PoE.String Account;
	byte u0;
}

message PartyDetails
{
    byte Id;
	Party Party;
    byte u0;
    byte PlayerCount;
	array<PartyPlayer> Skills with BinaryEncoding{Length = PlayerCount};
}

message LeftParty
{
    byte Id;
	uint PartyId;
}

message RequestPartyList
{
    byte Id;
}

type PartyListEntry
{
	Party Party;
	PoE.Unknown[3] u0;
}

message PartyList
{
    byte Id;
	ushort PartyCount;
	array<PartyListEntry> Parties with BinaryEncoding{Length = PartyCount};
}

message Friend
{
    byte Id;
	uint u0;
	PoE.String Account;
}

message UseWeaponSet
{
    byte Id;
	bool Primary;
}

message UseWeaponSetAck
{
    byte Id;
	bool Primary;
	uint u0;
}

message ObjectAdd
{
    byte Id;
	uint u0;
	uint ObjectId;
}

type ObjectUseOnLocation
{
	PoE.Unknown[3] u0;
	uint OldX;
	uint OldY;
	PoE.Skill Skill;
	ushort ActionId;
	uint u1;
	uint X;
	uint Y;
	byte u2;
}

message ObjectUpdate
{
    byte Id;
	uint ObjectId;
	ushort UpdateType;
	optional [|UpdateType == 0x701|] ObjectUseOnLocation ObjectUseOnLocation;
}

message ObjectRemove
{
    byte Id;
	uint ObjectId;
}

message UnknownPacket
{
    byte Id;
}
