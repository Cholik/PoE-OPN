protocol PoEGame with
BinaryEncodingDefaults{Endian = Endian.Big},
Visualization{AliasName = "PoE"},
Documentation
{
    ProtocolName = "Path of Exile Game Protocol",
    ShortName = "PoEGame",
    Description = ""
};

using Standard;
using PoE;
using VirtualTransport;
using TCP;
using Utility;

endpoint Server
	accepts EnterRequest
	accepts LinkItem
	accepts SendChat
	accepts Exit
	accepts Ping
	accepts UseWorldObject
	accepts UseOnLocation
	accepts PickItem
	accepts DropItem
	accepts PlaceItem
	accepts PickSocket
	accepts PlaceSocket
	accepts SpendPassivePoint
	accepts EquipSkill
	accepts Revive
	accepts UseObject
	accepts UsePotObject
	accepts UseItemOnItem
	accepts LoadComplete
	accepts NPCInteract
	accepts CloseNPCMenu
	accepts BuyItem
	accepts JoinParty
	accepts LeaveParty
	accepts UpdatePublicParty
	accepts RequestPartyDetails
	accepts RequestPartyList
	accepts CloseSellMenu
	accepts StageItemForSelling
	accepts UnstageItemForSelling
	accepts SellItems
	accepts SelectStashTab
	accepts CancelMatchQueue
	accepts QueueMatch
	accepts UseWeaponSet
	accepts UnknownPacket
	issues ReceiveChat
	issues Ping
	issues MapParameters
	issues Unknown0
	issues Exit
	issues NewGameServer
	issues PassivePoints
	issues AssignedSkills
	issues YouDied
	issues NPCMenuOpened
	issues PlayerUpdate
	issues PlayerLeftParty
	issues PartyDetails
	issues LeftParty
	issues PartyList
	issues ShopUpdate
	issues SellMenuClosed
	issues InventoryUpdate
	issues NewInventory
	issues Friend
	issues UseWeaponSetAck
	issues QueuedForMatch
	issues CancelledMatchQueue
	issues MatchList
	issues ObjectAdd
	issues ObjectUpdate
	issues ObjectRemove
	issues UnknownPacket;

client endpoint Client connected to Server;

endpoint DecodeNode[any endpoint server]
    accepts VirtualDataSegment issues VirtualDataSegment
{
	EncryptionContext Encryption = new EncryptionContext{};
	bool SentInfo = false;
	
	static any message Decode(stream s, BoolWrapper unsized)
	{
		switch (s.CurrentByte)
		{
			case 1 =>
				var m = BinaryDecoder<EnterRequest>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 3 =>
				var m = BinaryDecoder<LinkItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 4 =>
				var m = BinaryDecoder<SendChat>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 5 =>
				unsized.Value = true;
				var m = BinaryDecoder<ReceiveChat>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 6 =>
				var m = BinaryDecoder<Exit>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 8 =>
				var m = BinaryDecoder<Ping>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 9 =>
				var m = BinaryDecoder<Ping>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xA =>
				var m = BinaryDecoder<MapParameters>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xB =>
				var m = BinaryDecoder<Unknown0>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xC =>
				var m = BinaryDecoder<Unknown0>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xD =>
				var m = BinaryDecoder<UseWorldObject>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xE =>
				var m = BinaryDecoder<UseOnLocation>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xF =>
				var m = BinaryDecoder<Exit>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x10 =>
				var m = BinaryDecoder<NewGameServer>(s);
				if(m == nothing)
					return null;
				var mf = m as NewGameServer;
				PoE.EncryptionKeys[mf.ConnectionId] = mf.GameServer.EncryptionKey;
				mf.GameServer.Declare();
				return m as any message;
			case 0x11 =>
				var m = BinaryDecoder<PickItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x12 =>
				var m = BinaryDecoder<DropItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x13 =>
				var m = BinaryDecoder<PlaceItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x14 =>
				var m = BinaryDecoder<PickSocket>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x15 =>
				var m = BinaryDecoder<PlaceSocket>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x17 =>
				var m = BinaryDecoder<PassivePoints>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x18 =>
				var m = BinaryDecoder<SpendPassivePoint>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x20 =>
				var m = BinaryDecoder<EquipSkill>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x21 =>
				var m = BinaryDecoder<AssignedSkills>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x22 =>
				var m = BinaryDecoder<Revive>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x23 =>
				var m = BinaryDecoder<YouDied>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x24 =>
				var m = BinaryDecoder<UseObject>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x25 =>
				var m = BinaryDecoder<UsePotObject>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x26 =>
				var m = BinaryDecoder<UseItemOnItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x29 =>
				var m = BinaryDecoder<LoadComplete>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x2D =>
				var m = BinaryDecoder<NPCInteract>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x2E =>
				var m = BinaryDecoder<NPCMenuOpened>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x2F =>
				var m = BinaryDecoder<CloseNPCMenu>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x31 =>
				var m = BinaryDecoder<BuyItem>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x38 =>
				var m = BinaryDecoder<JoinParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x39 =>
				var m = BinaryDecoder<LeaveParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3B =>
				var m = BinaryDecoder<UpdatePublicParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3C =>
				var m = BinaryDecoder<RequestPartyDetails>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3D =>
				var m = BinaryDecoder<PlayerUpdate>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3E =>
				var m = BinaryDecoder<PlayerLeftParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x3F =>
				var m = BinaryDecoder<PartyDetails>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x40 =>
				var m = BinaryDecoder<LeftParty>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x42 =>
				var m = BinaryDecoder<RequestPartyList>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x43 =>
				var m = BinaryDecoder<PartyList>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x47 =>
				var m = BinaryDecoder<CloseSellMenu>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x48 =>
				var m = BinaryDecoder<StageItemForSelling>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x49 =>
				var m = BinaryDecoder<UnstageItemForSelling>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x4A =>
				var m = BinaryDecoder<SellItems>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x4C =>
				var m = BinaryDecoder<ShopUpdate>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x4D =>
				var m = BinaryDecoder<SellMenuClosed>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x52 =>
				unsized.Value = true;
				var m = BinaryDecoder<InventoryUpdate>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x53 =>
				unsized.Value = true;
				var m = BinaryDecoder<NewInventory>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x56 =>
				var m = BinaryDecoder<SelectStashTab>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x58 =>
				var m = BinaryDecoder<Friend>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x60 =>
				var m = BinaryDecoder<UseWeaponSet>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x61 => 
				var m = BinaryDecoder<UseWeaponSetAck>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x66 => 
				var m = BinaryDecoder<QueuedForMatch>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x67 => 
				var m = BinaryDecoder<CancelledMatchQueue>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x68 => 
				var m = BinaryDecoder<CancelMatchQueue>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x69 => 
				var m = BinaryDecoder<MatchList>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0x6A => 
				var m = BinaryDecoder<QueueMatch>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xF0 =>
				unsized.Value = true;
				var m = BinaryDecoder<ObjectAdd>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xF1 =>
				unsized.Value = true;
				var m = BinaryDecoder<ObjectUpdate>(s);
				if(m == nothing)
					return null;
				return m as any message;
			case 0xF2 =>
				var m = BinaryDecoder<ObjectRemove>(s);
				if(m == nothing)
					return null;
				return m as any message;
			default =>
				unsized.Value = true;
				var m = BinaryDecoder<UnknownPacket>(s);
				if(m == nothing)
					return null;
				return m as any message;
		}
	}
	
	static void Dispatch(bool Input, any message msg)
	{
		if (Input)
			dispatch endpoint Server accepts msg;
		else
			dispatch endpoint Server issues msg;
	}
	
    process this accepts s:VirtualDataSegment
    {
		if(!SentInfo)
		{
			SentInfo = true;
			var Request = BinaryDecoder<EnterRequest>(s.Payload) as EnterRequest;
			var Key = PoE.EncryptionKeys[Request.ConnectionId];
			Encryption.Setup(Key);
		
			var ep = (endpoint PoE.ReassemblyNode[server]) as PoE.ReassemblyNode;
			ep.SetHandler(new ProtocolHandler{Decode = Decode, Dispatch = Dispatch});
			
			dispatch endpoint Server accepts Request as any message;
		}
		else
		{
			var data = Encryption.In.Process(s.Payload);
			var e = endpoint PoE.ReassemblyNode[server];
			dispatch e accepts (new PoE.DecryptedPayload{Payload = data} as any message);
		}
    }

    process this issues s:VirtualDataSegment
    {
		var data = Encryption.Out.Process(s.Payload);
		var e = endpoint PoE.ReassemblyNode[server];
		dispatch e issues (new PoE.DecryptedPayload{Payload = data} as any message);
    }
}

autostart actor ServerOverTCP(VirtualTransport.Server server)
{
	process server issues s:VirtualDataSegment where ((s#SourceAddrBin as binary) in PoE.GameServers) || ((s#DestinationAddrBin as binary) in PoE.GameServers)
	{
		var e = endpoint DecodeNode[server];
		dispatch e issues s;
	}

	process server accepts s:VirtualDataSegment where ((s#SourceAddrBin as binary) in PoE.GameServers) || ((s#DestinationAddrBin as binary) in PoE.GameServers)
	{
		var e = endpoint DecodeNode[server];
		dispatch e accepts s;
	}
}

message EnterRequest
{
	byte Id;
	PoE.String Character;
	uint ConnectionId;
}

message LinkItem
{
	byte Id;
	uint ItemLinkId;
	uint u0;
	uint ItemId;
	byte u1;
}

message SendChat
{
	byte Id;
    PoE.String Message;
	byte ItemCount;
	array<uint> ItemLinkIds with BinaryEncoding{Length = ItemCount};
}

type LinkedItem
{
	uint MessageIndex;
	PoE.Unknown[13] u0;
	uint StackSize;
}

message ReceiveChat
{
	byte Id;
    PoE.String Character;
    PoE.String Message;
	byte u0;
	byte ItemCount;
	//array<LinkedItem> Items with BinaryEncoding{Length = ItemCount};
}

message Exit
{
	byte Id;
    byte u0;
}

message Ping
{
	byte Id;
}

message Unknown0
{
	byte Id;
	ushort Count;
	array<ushort> u0 with BinaryEncoding{Length = Count};
	array<byte> u1 with BinaryEncoding{Length = Count};
}

message LoadComplete
{
	byte Id;
	uint TileHash;
	uint DoodadHash;
}

message MapParameters
{
	byte Id;
	uint AreaHash; // A column in WorldAreas.dat
	PoE.String League;
	uint MapSeed;
	uint u4;
	ushort u5;
	byte HashCount;
	array<uint> Hashes with BinaryEncoding{Length = HashCount};
	ushort u6;
}

message UseWorldObject
{
	byte Id;
	uint ObjectId;
	PoE.Skill Skill;
	ushort ActionId;
    byte u0;
}

message UseOnLocation
{
	byte Id;
	uint X;
	uint Y;
	PoE.Skill Skill;
	ushort ActionId;
	byte u0;
}

message NewGameServer
{
	byte Id;
	uint ConnectionId;
	PoE.Unknown[11] u0;
	PoE.GameServerInfo GameServer;
}

pattern ItemContainer = enum uint
{
	Inventory = 1,
	Body = 2,
	LeftHand = 3,
	RightHand = 4,
	Helm = 5,
	Amulet = 6,
	LeftRing = 7,
	RightRing = 8,
	Gloves = 9,
	Boots = 10,
	Belt = 11,
	Flasks = 12,
	...
};

message PickItem
{
	byte Id;
	uint ItemId;
	ItemContainer Container;
}

message DropItem
{
	byte Id;
}

message PlaceItem
{
	byte Id;
	ItemContainer Container;
	uint X;
	uint Y;
}

message PickSocket
{
	byte Id;
	uint u0;
	uint u1;
	uint u2;
}

message PlaceSocket
{
	byte Id;
	uint u0;
	uint u1;
	uint u2;
}

message PassivePoints
{
	byte Id;
	ushort NodeCount;
	array<PoE.ushortLE> Nodes with BinaryEncoding{Length = NodeCount};
	PoE.Unknown[6] u0;
}

message SpendPassivePoint
{
	byte Id;
	ushort u0;
	ushort Node;
}

message EquipSkill
{
	byte Id;
	PoE.SkillSlot Slot;
	PoE.SkillLE Skill;
}

message AssignedSkills
{
	byte Id;
	array<PoE.Skill> Skills with BinaryEncoding{Length = 8};
}

message Revive
{
	byte Id;
}

message YouDied
{
	byte Id;
}

message UseObject
{
	byte Id;
	uint u0;
	uint u1;
}

message UsePotObject
{
	byte Id;
	uint PotIndex;
}

message UseItemOnItem
{
	byte Id;
	uint u0;
	uint u1;
	uint u2;
	uint u3;
}

message JoinParty
{
	byte Id;
	uint PartyId;
}

message LeaveParty
{
	byte Id;
	uint PartyId;
}

message UpdatePublicParty
{
	byte Id;
	PoE.String PartyName;
}

message RequestPartyDetails
{
	byte Id;
	uint PartyId;
}

type CharacterInfo
{
	PoE.String Character;
	uint Level;
	PoE.Class Class;
	PoE.Unknown[3] u0;
	PoE.Area Area;
	byte u1;
}

message PlayerUpdate
{
	byte Id;
	PoE.String Account;
	PoE.String Message;
    bool Online;
	optional [|Online == true|] CharacterInfo Character;
}

message PlayerLeftParty
{
	byte Id;
	PoE.String Character;
}

type Party
{
	uint Id;
	PoE.String Name;
}

type PartyPlayer
{
	PoE.String Account;
	byte u0;
}

message PartyDetails
{
	byte Id;
	Party Party;
    byte u0;
    byte PlayerCount;
	array<PartyPlayer> Players with BinaryEncoding{Length = PlayerCount};
}

message LeftParty
{
	byte Id;
	uint PartyId;
}

message RequestPartyList
{
	byte Id;
}

type PartyListEntry
{
	Party Party;
	PoE.Unknown[3] u0;
}

message PartyList
{
	byte Id;
	ushort PartyCount;
	array<PartyListEntry> Parties with BinaryEncoding{Length = PartyCount};
}

message CloseSellMenu
{
	byte Id;
	uint u0;
}

message StageItemForSelling
{
	byte Id;
	uint u0;
	uint ItemId;
	ushort u2;
}

message UnstageItemForSelling
{
	byte Id;
	uint ItemId;
}

message SellItems
{
	byte Id;
	byte u0;
	uint u1;
}

message ShopUpdate
{
	byte Id;
	PoE.Unknown[16] u0;
	PoE.String Shopkeeper;
}

message SellMenuClosed
{
	byte Id;
	PoE.Unknown[5] u0;
}

message InventoryUpdate
{
	byte Id;
}

message NewInventory
{
	byte Id;
}

message SelectStashTab
{
	byte Id;
	byte u0;
    byte TabIndex;
}

message Friend
{
	byte Id;
	uint u0;
	PoE.String Account;
}

message UseWeaponSet
{
	byte Id;
	bool Primary;
}

message UseWeaponSetAck
{
	byte Id;
	bool Primary;
}

message QueuedForMatch
{
	byte Id;
    byte u0;
	PoE.String Match;
}

message CancelledMatchQueue
{
	byte Id;
}

message CancelMatchQueue
{
	byte Id;
}

message NPCInteract
{
	byte Id;
    byte MenuIndex;
}

message NPCMenuOpened
{
	byte Id;
	uint MenuId;
	byte u0;
}

message CloseNPCMenu
{
	byte Id;
}

message BuyItem
{
	byte Id;
	PoE.Unknown[17] u0;
}

type Match
{
	PoE.String Name;
	uint QueuedPlayerCount;
	ushort u1;
	ushort MaxLevel;
	byte u2;
}

message MatchList
{
	byte Id;
	ushort MatchCount;
	array<Match> Matches with BinaryEncoding{Length = MatchCount};
}

message QueueMatch
{
	byte Id;
	ushort MatchIndex;
}

message ObjectAdd
{
	byte Id;
	uint u0;
	uint ObjectId;
}

type ObjectUseOnLocation
{
	PoE.Unknown[3] u0;
	uint OldX;
	uint OldY;
	PoE.Skill Skill;
	ushort ActionId;
	uint u1;
	uint X;
	uint Y;
	byte u2;
}

message ObjectUpdate
{
	byte Id;
	uint ObjectId;
	ushort UpdateType;
	optional [|UpdateType == 0x701|] ObjectUseOnLocation ObjectUseOnLocation;
}

message ObjectRemove
{
	byte Id;
	uint ObjectId;
}

message UnknownPacket
{
	byte Id;
}
