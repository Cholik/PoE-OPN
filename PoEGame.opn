protocol PoEGame with
BinaryEncodingDefaults{Endian = Endian.Big},
Visualization{AliasName = "PoE"},
Documentation
{
    ProtocolName = "Path of Exile Game Protocol",
    ShortName = "PoEGame",
    Description = ""
};

using Standard;
using PoE;
using TCP;
using Utility;

endpoint Server
	accepts EnterRequest
	accepts LinkItem
	accepts SendChat
	accepts Exit
	accepts Ping
	accepts Unknown2
	accepts UseOnLocation
	accepts PickItem
	accepts PlaceItem
	accepts SpendPassivePoint
	accepts EquipSkill
	accepts UseObject
	accepts Unknown1
	accepts JoinParty
	accepts LeaveParty
	accepts UpdatePublicParty
	accepts RequestPartyDetails
	accepts RequestPartyList
	accepts UseWeaponSet
	accepts UnknownPacket
	issues ReceiveChat
	issues Ping
	issues EnterResult
	issues Unknown0
	issues NewGameServer
	issues PassivePoints
	issues AssignedSkills
	issues PlayerUpdate
	issues PlayerLeftParty
	issues PartyDetails
	issues LeftParty
	issues PartyList
	issues Friend
	issues UseWeaponSetAck
	issues ObjectAdd
	issues ObjectUpdate
	issues ObjectRemove
	issues UnknownPacket;

client endpoint Client connected to Server;

type Handler
{
	static any message Decode(stream s, BoolWrapper unsized)
	{
		any message msg = null;
		optional NewGameServer new_game_server;
		
		switch (s.CurrentByte)
		{
			case 1 =>
				msg = BinaryDecoder<EnterRequest>(s);
			case 3 =>
				msg = BinaryDecoder<LinkItem>(s);
			case 4 =>
				msg = BinaryDecoder<SendChat>(s);
			case 5 =>
				unsized.Value = true;
				msg = BinaryDecoder<ReceiveChat>(s);
			case 6 =>
				msg = BinaryDecoder<Exit>(s);
			case 8 =>
				msg = BinaryDecoder<Ping>(s);
			case 9 =>
				msg = BinaryDecoder<Ping>(s);
			case 0xA =>
				unsized.Value = true;
				msg = BinaryDecoder<EnterResult>(s);
			case 0xB =>
				msg = BinaryDecoder<Unknown0>(s);
			case 0xD =>
				msg = BinaryDecoder<Unknown2>(s);
			case 0xE =>
				msg = BinaryDecoder<UseOnLocation>(s);
			case 0x10 =>
				new_game_server = BinaryDecoder<NewGameServer>(s);
				if (new_game_server != nothing)
					new_game_server.GameServer.Declare();
				msg = new_game_server;
			case 0x11 =>
				msg = BinaryDecoder<PickItem>(s);
			case 0x13 =>
				msg = BinaryDecoder<PlaceItem>(s);
			case 0x17 =>
				msg = BinaryDecoder<PassivePoints>(s);
			case 0x18 =>
				msg = BinaryDecoder<SpendPassivePoint>(s);
			case 0x20 =>
				msg = BinaryDecoder<EquipSkill>(s);
			case 0x21 =>
				msg = BinaryDecoder<AssignedSkills>(s);
			case 0x24 =>
				msg = BinaryDecoder<UseObject>(s);
			case 0x28 =>
				msg = BinaryDecoder<Unknown1>(s);
			case 0x37 =>
				msg = BinaryDecoder<JoinParty>(s);
			case 0x38 =>
				msg = BinaryDecoder<LeaveParty>(s);
			case 0x3A =>
				msg = BinaryDecoder<UpdatePublicParty>(s);
			case 0x3B =>
				msg = BinaryDecoder<RequestPartyDetails>(s);
			case 0x3C =>
				msg = BinaryDecoder<PlayerUpdate>(s);
			case 0x3D =>
				msg = BinaryDecoder<PlayerLeftParty>(s);
			case 0x3E =>
				msg = BinaryDecoder<PartyDetails>(s);
			case 0x3F =>
				msg = BinaryDecoder<LeftParty>(s);
			case 0x41 =>
				msg = BinaryDecoder<RequestPartyList>(s);
			case 0x42 =>
				msg = BinaryDecoder<PartyList>(s);
			case 0x57 =>
				msg = BinaryDecoder<Friend>(s);
			case 0x5D =>
				msg = BinaryDecoder<UseWeaponSet>(s);
			case 0x5E =>
				msg = BinaryDecoder<UseWeaponSetAck>(s);
			case 0xF0 =>
				unsized.Value = true;
				msg = BinaryDecoder<ObjectAdd>(s);
			case 0xF1 =>
				unsized.Value = true;
				msg = BinaryDecoder<ObjectUpdate>(s);
			case 0xF2 =>
				msg = BinaryDecoder<ObjectRemove>(s);
			default =>
				unsized.Value = true;
				msg = BinaryDecoder<UnknownPacket>(s);
		}
		
		return msg;
	}
	
	static void Dispatch(bool Input, any message msg)
	{
		if (Input)
			dispatch endpoint Server accepts msg;
		else
			dispatch endpoint Server issues msg;
	}
}

ProtocolHandler handler = new ProtocolHandler{Decode = Handler.Decode, Dispatch = Handler.Dispatch};

endpoint ReassemblyNode[any endpoint ep]
    accepts TCP.VirtualDataSegment issues TCP.VirtualDataSegment
{
	DecodingBuffer in_buffer = new DecodingBuffer{Input = true, Handler = handler};
	DecodingBuffer out_buffer = new DecodingBuffer{Input = false, Handler = handler};

    process this accepts s:TCP.VirtualDataSegment
    {
		in_buffer.Add(s);
		dispatch endpoint GarbageEndpoint accepts s;
    }

    process this issues s:TCP.VirtualDataSegment
    {
        out_buffer.Add(s);
        dispatch endpoint GarbageEndpoint issues s;
    }
}

autostart actor ReassemblyActor(ReassemblyNode server)
{    
    ~endpoint(ReassemblyNode server)
    {
		server.in_buffer.Clear();
		server.out_buffer.Clear();
    }
}

autostart actor ServerOverTCP(TCP.Server server)
{
	process server issues s:TCP.VirtualDataSegment where ((s#SourceAddrBin as binary) in PoE.GameServers) || ((s#DestinationAddrBin as binary) in PoE.GameServers)
	{
		var e = endpoint ReassemblyNode[server];
		dispatch e issues s;
	}

	process server accepts s:TCP.VirtualDataSegment where ((s#SourceAddrBin as binary) in PoE.GameServers) || ((s#DestinationAddrBin as binary) in PoE.GameServers)
	{
		var e = endpoint ReassemblyNode[server];
		dispatch e accepts s;
	}
}

message EnterRequest
{
    byte Id;
	PoE.String Character;
	uint ConnectionId;
}

message LinkItem
{
    byte Id;
	uint ItemLinkId;
	uint u0;
	uint ItemId;
	byte u1;
}

message SendChat
{
    byte Id;
    PoE.String Message;
	byte ItemCount;
	array<uint> ItemLinkIds with BinaryEncoding{Length = ItemCount};
}

type LinkedItem
{
	uint MessageIndex;
	PoE.Unknown[13] u0;
	uint StackSize;
}

message ReceiveChat
{
    byte Id;
    PoE.String Character;
    PoE.String Message;
	ushort ItemCount;
	//array<LinkedItem> Items with BinaryEncoding{Length = ItemCount};
}

message Exit
{
    byte Id;
}

message Ping
{
    byte Id;
}

message Unknown0
{
    byte Id;
	ushort Count;
	array<ushort> u0 with BinaryEncoding{Length = Count};
	array<byte> u1 with BinaryEncoding{Length = Count};
}

message Unknown1
{
    byte Id;
	uint u0;
	uint u1;
}

message EnterResult
{
    byte Id;
	uint u0;
	PoE.String League;
	uint MapSeed;
}

message Unknown2
{
    byte Id;
	PoE.Unknown[9] u0;
}

message UseOnLocation
{
    byte Id;
	uint X;
	uint Y;
	PoE.Skill Skill;
	ushort ActionId;
	byte u0;
}

message NewGameServer
{
    byte Id;
	uint ConnectionId;
	PoE.Unknown[11] u0;
	PoE.GameServerInfo GameServer;
}

pattern ItemContainer = enum uint
{
	Inventory = 1,
	Body = 2,
	LeftHand = 3,
	RightHand = 4,
	Helm = 5,
	Amulet = 6,
	LeftRing = 7,
	RightRing = 8,
	Gloves = 9,
	Boots = 10,
	Belt = 11,
	Flasks = 12
};

message PickItem
{
    byte Id;
	uint ItemId;
	ItemContainer Container;
}

message PlaceItem
{
    byte Id;
	ItemContainer Container;
	uint X;
	uint Y;
}

message PassivePoints
{
    byte Id;
	ushort NodeCount;
	array<PoE.ushortLE> Nodes with BinaryEncoding{Length = NodeCount};
	PoE.Unknown[6] u0;
}

message SpendPassivePoint
{
    byte Id;
	ushort u0;
	ushort Node;
}

message EquipSkill
{
    byte Id;
	PoE.SkillSlot Slot;
	PoE.Skill Skill;
}

message AssignedSkills
{
    byte Id;
	array<PoE.SkillLE> Skills with BinaryEncoding{Length = 7};
}

message UseObject
{
    byte Id;
	uint u0;
	uint u1;
}

message JoinParty
{
    byte Id;
	uint PartyId;
}

message LeaveParty
{
    byte Id;
	uint PartyId;
}

message UpdatePublicParty
{
    byte Id;
	PoE.String PartyName;
}

message RequestPartyDetails
{
    byte Id;
	uint PartyId;
}

type CharacterInfo
{
	PoE.String Character;
	uint Level;
	PoE.Class Class;
	PoE.Unknown[3] u0;
	PoE.Area Area;
}

message PlayerUpdate
{
    byte Id;
	PoE.String Account;
	PoE.String Message;
    bool Online;
	optional [|Online == true|] CharacterInfo Character;
}

message PlayerLeftParty
{
    byte Id;
	PoE.String Character;
}

type Party
{
	uint Id;
	PoE.String Name;
}

type PartyPlayer
{
	PoE.String Account;
	byte u0;
}

message PartyDetails
{
    byte Id;
	Party Party;
    byte u0;
    byte PlayerCount;
	array<PartyPlayer> Skills with BinaryEncoding{Length = PlayerCount};
}

message LeftParty
{
    byte Id;
	uint PartyId;
}

message RequestPartyList
{
    byte Id;
}

type PartyListEntry
{
	Party Party;
	PoE.Unknown[3] u0;
}

message PartyList
{
    byte Id;
	ushort PartyCount;
	array<PartyListEntry> Parties with BinaryEncoding{Length = PartyCount};
}

message Friend
{
    byte Id;
	uint u0;
	PoE.String Account;
}

message UseWeaponSet
{
    byte Id;
	bool Primary;
}

message UseWeaponSetAck
{
    byte Id;
	bool Primary;
	uint u0;
}

message ObjectAdd
{
    byte Id;
	uint u0;
	uint ObjectId;
}

type ObjectUseOnLocation
{
	PoE.Unknown[3] u0;
	uint OldX;
	uint OldY;
	PoE.Skill Skill;
	ushort ActionId;
	uint u1;
	uint X;
	uint Y;
	byte u2;
}

message ObjectUpdate
{
    byte Id;
	uint ObjectId;
	ushort UpdateType;
	optional [|UpdateType == 0x701|] ObjectUseOnLocation ObjectUseOnLocation;
}

message ObjectRemove
{
    byte Id;
	uint ObjectId;
}

message UnknownPacket
{
    byte Id;
}
